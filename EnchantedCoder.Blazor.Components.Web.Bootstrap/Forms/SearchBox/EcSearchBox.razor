@namespace EnchantedCoder.Blazor.Components.Web.Bootstrap
@using EnchantedCoder.Blazor.Components.Web.Bootstrap.Internal
@typeparam TItem

<div id="@dropdownId" class="@CssClassHelper.Combine("ec-search-box", CssClassEffective)">
    <EcDropdown AutoClose="DropdownAutoClose.Outside">
        <EcDropdownToggleElement @ref="dropdownToggle"
                                 ElementName="div"
                                 CssClass="@(initialized || DefaultContentTemplate is not null ? null : "disabled")"
                                 DropdownReference="@("#" + dropdownId)"
                                 DropdownOffset="@DropdownOffset"
                                 OnShown="HandleDropdownMenuShown"
                                 OnHidden="HandleDropdownMenuHidden"
                                 id="@dropdownToggleElementId">

            @if (!string.IsNullOrEmpty(Label) && LabelType == EnchantedCoder.Blazor.Components.Web.Bootstrap.LabelType.Regular)
            {
                <label class="form-label">@Label</label>
            }
            <div class="@CssClassHelper.Combine(
                            "position-relative",
                            (HasInputGroups ? "input-group" : null),
                            (LabelType == EnchantedCoder.Blazor.Components.Web.Bootstrap.LabelType.Floating) ? "form-floating" : null,
                            InputSizeEffective.AsInputGroupCssClass(),
                            InputGroupCssClass)">

                @if (InputGroupStartText is not null)
                {
                    <span class="input-group-text">@InputGroupStartText</span>
                }

                @InputGroupStartTemplate

                <input
                    id="@inputId"
                    value="@TextQuery"
                    @oninput="(eventArgs) => HandleTextQueryValueChanged(eventArgs.Value.ToString())"
                    @onfocus="HandleInputFocus"
                    @onblur="HandleInputBlur"
                    inputmode="search"
                    enabled="@Enabled"
                    placeholder="@Placeholder"
                    class="@CssClassHelper.Combine(
                       "form-control",
                       (!HasInputGroupEnd && HasInputGroups ? "ec-search-box-input-with-search-icon" : null),
                       InputCssClassEffective)" />

                @if (!string.IsNullOrEmpty(Label) && LabelType == EnchantedCoder.Blazor.Components.Web.Bootstrap.LabelType.Floating)
                {
                    <label for="@inputId">@Label</label>
                }

                @if (!HasInputGroupEnd)
                {
                    if (dataProviderInProgress)
                    {
                        <div class="ec-search-box-input-icon ec-search-box-input-icon-end">
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(TextQuery) && (ClearIconEffective is not null))
                    {
                        <div role="button" class="ec-search-box-input-icon ec-search-box-input-icon-end" @onclick="ClearInputAsync">
                            <EcIcon Icon="ClearIconEffective" />
                        </div>
                    }
                    else if (SearchIconEffective is not null)
                    {
                        <div class="ec-search-box-input-icon ec-search-box-input-icon-end">
                            <EcIcon Icon="SearchIconEffective" />
                        </div>
                    }
                }

                @InputGroupEndTemplate

                @if (InputGroupEndText is not null)
                {
                    <span class="input-group-text">@InputGroupEndText</span>
                }
            </div>
        </EcDropdownToggleElement>

        <EcDropdownMenu>
            @if ((searchResults.Count > 0) && (TextQuery.Length >= MinimumLengthEffective))
            {
                @for (int i = 0; i < searchResults.Count; i++)
                {
                    var item = searchResults[i];

                    string title = ItemTitleSelector?.Invoke(item) ?? null;
                    string subtitle = ItemSubtitleSelector?.Invoke(item) ?? null;
                    IconBase icon = ItemIconSelector?.Invoke(item) ?? null;

                    <li class="overflow-hidden">
                        <button
                            type="button"
                            tabindex="-1"
                            class="@CssClassHelper.Combine("dropdown-item", focusedItemIndex == i ? "ec-dropdown-item-focused" : null, ItemCssClassEffective)"
                            @onclick="() => HandleItemSelected(item)">

                            @if (ItemTemplate is null)
                            {
                                <EcSearchBoxItemInternal Title="@title" Subtitle="@subtitle" Icon="@icon" />
                            }
                            else
                            {
                                @ItemTemplate(item)
                            }
                        </button>
                    </li>
                }
            }
            else if ((TextQuery is not null) && (TextQuery.Length >= MinimumLengthEffective))
            {
                @NotFoundTemplate
            }
            else
            {
                @DefaultContentTemplate
            }

            @if (AllowTextQuery && (TextQuery is not null) && (TextQuery.Length >= MinimumLengthEffective))
            {
                <li class="overflow-hidden">
                    <button
                        type="button"
                        tabindex="-1"
                        class="@CssClassHelper.Combine("dropdown-item", HasFreeTextItemFocus() ? "ec-dropdown-item-focused" : null, ItemCssClassEffective)"
                        @onclick="HandleTextQueryTriggered">

                        @if (TextQueryItemTemplate is null)
                        {
                            <EcSearchBoxItemInternal Title="@TextQuery" Icon="@SearchIconEffective" />
                        }
                        else
                        {
                            @TextQueryItemTemplate(TextQuery)
                        }
                    </button>
                </li>
            }
        </EcDropdownMenu>
    </EcDropdown>
</div>
