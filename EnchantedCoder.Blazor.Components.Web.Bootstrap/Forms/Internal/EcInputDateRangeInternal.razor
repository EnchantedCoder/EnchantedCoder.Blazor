@namespace EnchantedCoder.Blazor.Components.Web.Bootstrap.Internal
@inherits Microsoft.AspNetCore.Components.Forms.InputBase<DateTimeRange>

@if ((FieldIdentifier.Model != null) && (fromFieldIdentifier.Model != null) && (toFieldIdentifier.Model != null))
{
    bool fromValid = !EditContext.GetValidationMessages(FieldIdentifier).Any() && !EditContext.GetValidationMessages(fromFieldIdentifier).Any();
    bool toValid = !EditContext.GetValidationMessages(FieldIdentifier).Any() && !EditContext.GetValidationMessages(toFieldIdentifier).Any();

    <div class="@CssClassHelper.Combine("ec-input-date-range", (ShowPredefinedDateRangesEffective && (PredefinedDateRangesEffective?.Any() ?? false)) ? "ec-input-date-range-predefined-ranges" : null)">
        <div class="input-group flex-nowrap">
            <EcDropdown AutoClose="DropdownAutoClose.Outside">
                @*Input must not be rendered when bootstrap dropdown is opened. Therefore we add is-invalid class via IJSRuntime. *@
                <EcDropdownToggleElement @ref="fromDropdownToggleElement"
                                    ElementName="input"
                                    type="text"
                                    CssClass="@CssClassHelper.Combine(this.InputCssClass,
                                                                        ((IInputWithSize)this).GetInputSizeCssClass(),
                                                                        fromValid ? null : EcInputBase<object>.InvalidCssClass,
                                                                        "rounded-end-0")"
                                    Caret="false"
                                    value="@FormatDate(Value.StartDate)"
                                    placeholder="@StringLocalizerFactory.GetLocalizedValue("From", typeof(EcInputDateRange))"
                                    @onchange="HandleFromChanged"
                                    disabled="@(!EnabledEffective)"
                                    @attributes="this.AdditionalAttributes" />

                <EcDropdownContent CssClass="ec-input-date-range-dropdown-menu">
                    @if (EnabledEffective)
                    {
                        <div class="ec-input-date-range-calendar">
                            <EcCalendar Value="@Value.StartDate" ValueChanged="HandleFromCalendarValueChangedAsync" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomizationFrom" KeyboardNavigation="false" />
                        </div>
                        <div class="ec-input-date-range-buttons">
                            @if (ShowClearButtonEffective)
                            {
                                <EcButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(EcInputDateRange))" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleFromClearClickAsync" tabindex="-1" />
                            }
                            @if (ShowPredefinedDateRangesEffective && (PredefinedDateRangesEffective != null) && PredefinedDateRangesEffective.Any())
                            {
                                @foreach (var item in PredefinedDateRangesEffective)
                                {
                                    <EcButton @key="@item" Text="@StringLocalizerFactory.GetLocalizedValue(item.Label, item.ResourceType)" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="() => HandleDateRangeClick(item.DateRange, fromDropdownToggleElement)" tabindex="-1" />
                                }
                            }
                        </div>
                    }
                </EcDropdownContent>
            </EcDropdown>

            <EcDropdown AutoClose="DropdownAutoClose.Outside">
                @*Input must not be rendered when bootstrap dropdown is opened. Therefore we add is-invalid class via IJSRuntime. *@
                <EcDropdownToggleElement @ref="toDropdownToggleElement"
                                    ElementName="input"
                                    type="text"
                                    CssClass="@CssClassHelper.Combine(this.InputCssClass,
                                                                        ((IInputWithSize)this).GetInputSizeCssClass(),
                                                                        toValid ? null : EcInputBase<object>.InvalidCssClass,
                                                                        "rounded-start-0")"
                                    value="@FormatDate(Value.EndDate)"
                                    placeholder="@StringLocalizerFactory.GetLocalizedValue("To", typeof(EcInputDateRange))"
                                    @onchange="HandleToChanged"
                                    disabled="@(!EnabledEffective)"
                                    @attributes="this.AdditionalAttributes" />

                <EcDropdownContent CssClass="ec-input-date-range-dropdown-menu">
                    @if (EnabledEffective)
                    {
                        <div class="ec-input-date-range-calendar">
                            <EcCalendar Value="@Value.EndDate" ValueChanged="HandleToCalendarValueChanged" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomizationTo" KeyboardNavigation="false" />
                        </div>
                        <div class="ec-input-date-range-buttons">
                            @if (ShowClearButtonEffective)
                            {
                                <EcButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(EcInputDateRange))" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleToClearClickAsync" tabindex="-1" />
                            }
                            @if (ShowPredefinedDateRangesEffective && (PredefinedDateRangesEffective != null) && PredefinedDateRangesEffective.Any())
                            {
                                @foreach (var item in PredefinedDateRangesEffective)
                                {
                                    <EcButton @key="@item" Text="@StringLocalizerFactory.GetLocalizedValue(item.Label, item.ResourceType)" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="() => HandleDateRangeClick(item.DateRange, toDropdownToggleElement)" tabindex="-1" />
                                }
                            }
                        </div>
                    }
                </EcDropdownContent>
            </EcDropdown>
        </div>

        <EcValidationMessage TValue="DateTimeRange" ForFieldNames="@validationFieldNames" Mode="@ValidationMessageModeEffective" />
    </div>
}