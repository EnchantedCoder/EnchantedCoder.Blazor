<div class="row">
    <div class="col-lg-4" style="height: 400px">
        <HxTreeView TItem="Directory"
                    @bind-SelectedItem="selectedDirectory"
                    Items="@fileSystem"
                    CssClass="border rounded p-2"
                    ItemTitleSelector="@(p => p.Name)"
                    ItemIconSelector="@(p => p.Icon)"
                    ItemChildrenSelector="@(p => p.Subdirectories)" />
    </div>
    <div class="col-lg-4">
        @if (selectedDirectory == null)
        {
            <p>No directory selected.</p>
        }
        else
        {
            <p>Directory <b>@selectedDirectory.Name</b> selected.</p>
        }
    </div>
</div>

@code {
    private Directory selectedDirectory;
    private List<Directory> fileSystem;

    protected override void OnInitialized()
    {
        fileSystem = new()
            {
            new Directory("C:\\", BootstrapIcon.Folder)
            {
                Subdirectories = new()
                {
                    new Directory("Program Files", BootstrapIcon.Gem)
                    {
                        Subdirectories = new() { new Directory("Visual Studio 2022") { Subdirectories = new() }, new Directory("Rider 2021.3") { Subdirectories = new() }, new Directory("VS Code") { Subdirectories = new() }, new Directory("Borland Pascal") { Subdirectories = new() } }
                    },
                    new Directory("Users", BootstrapIcon.Person)
                    {
                        Subdirectories = new() { new Directory("Vladimir") { Subdirectories = new() }, new Directory("Jhosav") { Subdirectories = new() }, new Directory("Ben") { Subdirectories = new() }, new Directory("Admin") { Subdirectories = new() } }
                    },
                    new Directory("Data", BootstrapIcon.Person)
                    {
                        Subdirectories = new() { new Directory("Open Office") { Subdirectories = new() }, new Directory("Git", BootstrapIcon.Magic) { Subdirectories = new() }, new Directory("Autocad") { Subdirectories = new() } }
                    },
                }
            },
            new Directory("D:\\", BootstrapIcon.Folder2)
            {
                Subdirectories = new()
                {
                    new Directory("Games", BootstrapIcon.Play)
                    {
                        Subdirectories = new() { new Directory("Cyberpunk 2077") { Subdirectories = new() }, new Directory("The Witcher 3") { Subdirectories = new() }, new Directory("Tetris") { Subdirectories = new() }, new Directory("Little Big Adventure 2: Twinsen's Odyssey") { Subdirectories = new() } }
                    },
                    new Directory("Music", BootstrapIcon.FileMusic)
                    {
                        Subdirectories = new() { new Directory("Queen") { Subdirectories = new() { new Directory("Live Killers") { Subdirectories = new() }, new Directory("Live Magic") { Subdirectories = new() } }}, new Directory("Metallica") { Subdirectories = new() }, new Directory("AC/DC") { Subdirectories = new() } }
                    },
                    new Directory("Images", BootstrapIcon.Image) { Subdirectories = new() }
                }
            }
        };

        selectedDirectory = fileSystem.First();
    }

    public class Directory
    {
        public Directory(string name, IconBase icon = null, string message = null, ThemeColor? severity = null)
        {
            Name = name;
            Icon = icon;
            Message = message;
            Severity = severity;
        }

        public string Name { get; }

        public IconBase Icon { get; set; }

        public string Message { get; set; }

        public ThemeColor? Severity { get; set; }

        public List<Directory> Subdirectories { get; set; }

        public override string ToString()
        {
            return Name;
        }
    }

}