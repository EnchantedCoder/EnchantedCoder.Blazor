@page "/InputsWithFloatingLabelsTest"

@using System.Globalization;
@using System.ComponentModel.DataAnnotations
@using EnchantedCoder

<h1>Inputs</h1>

<div class="card" @onclick="HandleCardClick">
	<div class="card-header">OnClick propagation test</div>
	<div class="card-body">

        <EcFilterForm @ref="filterForm" TModel="FormModel" @bind-Model="@model" OnChipsUpdated="HandleChipUpdated">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<EcInputText LabelType="LabelType.Floating" Label="Text (large)" InputSize="InputSize.Large" @bind-Value="@context.TextBasic" Hint="@context.TextBasic" />

			<EcInputText LabelType="LabelType.Floating" Label="Text (oninput)" @bind-Value="@context.TextOnInput" BindEvent="BindEvent.OnInput">
				<HintTemplate>
					Hint: @context.TextOnInput
				</HintTemplate>
			</EcInputText>

			<EcInputText LabelType="LabelType.Floating" Label="Text (disabled)" Enabled="false" @bind-Value="@context.TextDisabled" />
			<EcInputText LabelType="LabelType.Floating" Label="Text (password)" Type="InputType.Password" @bind-Value="@context.TextPassword" />
			<EcInputText LabelType="LabelType.Floating" Label="Text (email)" Type="InputType.Email" @bind-Value="@context.TextEmail" />

			<EcInputTextArea LabelType="LabelType.Floating" Label="TextArea" @bind-Value="@context.TextLong" />

			<EcInputNumber LabelType="LabelType.Floating" Label="Integer" @bind-Value="@context.IntegerValue" ParsingErrorMessage="Enter correct Integer." />
			<EcInputNumber LabelType="LabelType.Floating" Label="Integer (nullable)" @bind-Value="@context.NullableIntegerValue" ParsingErrorMessage="Enter correct Integer." />

			<EcInputNumber LabelType="LabelType.Floating" Label="Decimal" @bind-Value="@context.DecimalValue" ParsingErrorMessage="Enter correct Decimal." />
			<EcInputNumber LabelType="LabelType.Floating" Label="Decimal (nullable)" @bind-Value="@context.NullableDecimalValue" ParsingErrorMessage="Enter correct Decimal." />

			<EcInputPercent LabelType="LabelType.Floating" Label="Percent" @bind-Value="@context.PercentValue" ParsingErrorMessage="Enter correct Percent." InputGroupEndText="" />

			<EcInputDate LabelType="LabelType.Floating" Label="Date" @bind-Value="@context.DateValue" ParsingErrorMessage="Enter correct Date." />
			<EcInputDate LabelType="LabelType.Floating" Label="Date (nullable)" @bind-Value="@context.NullableDateValue" ParsingErrorMessage="Enter correct Date." InputGroupEndTemplate="null" />

            <EcSearchBox LabelType="LabelType.Floating"
			 DataProvider="ProvideSearchResults"
             ItemTitleSelector="i => i.Title"
             ItemSubtitleSelector="i => i.Subtitle"
             ItemIconSelector="i => i.Icon"
             TItem="SearchBoxItem"
             Label="Search"
             OnItemSelected="OnItemSelected"
             AllowTextQuery="true"
             @bind-TextQuery="textQuery"
             OnTextQueryTriggered="OnTextQueryTriggered" />

			@*<EcInputDateRange LabelType="LabelType.Floating" Label="DateRange" @bind-Value="@context.DateRange" ParsingErrorMessage="Enter correct DateRange." />

		<EcSelect LabelType="LabelType.Floating" Label="Select (TValueType: string)" @bind-Value="@context.CultureInfoSelectName" ValueSelector="@(item => item.DisplayName)" Data="@cultureInfos" TextSelector="@(item => item.DisplayName)" />
		<EcSelect LabelType="LabelType.Floating" Label="Select (TValueType: CultureInfo, small)" @bind-Value="@context.CultureInfoSelect" Data="@cultureInfos" TextSelector="@(item => item.DisplayName)" InputSize="InputSize.Small" />
		<EcSelect LabelType="LabelType.Floating" Label="Select (Data == null, small)" TItem="CultureInfo" TValue="CultureInfo" @bind-Value="@context.CultureInfoSelect" TextSelector="@(item => item.DisplayName)" NullDataText="No data available." InputSize="InputSize.Small" />*@

			<EcAutosuggest LabelType="LabelType.Floating" Label="Autosuggest (large)" @bind-Value="@context.CultureInfoAutosuggest" TextSelector="@(item => item.DisplayName)" DataProvider="CulturesAutosuggestDataProvider" InputSize="InputSize.Large">
				<HintTemplate>@context.CultureInfoAutosuggest?.DisplayName</HintTemplate>
			</EcAutosuggest>

            <EcInputTags Label="Tags (Bootstrap theme colors suggested)"
             LabelType="LabelType.Floating"
			 @bind-Value="values"
			 DataProvider="GetNewItemSuggestions" />

			<EcSubmit Icon="@BootstrapIcon.Check" Color="ThemeColor.Primary">Submit</EcSubmit>
		</EcFilterForm>

	</div>
	<div class="card-footer">
		<p>Last captured click: @lastCapturedClick</p>
		<EcChipList Chips="@chips" OnChipRemoveClick="HandleChipRemoveClick" />
	</div>
</div>

@code
{
	private FormModel model = new FormModel();
	private EcFilterForm<FormModel> filterForm;
	private ChipItem[] chips;
	private DateTime? lastCapturedClick = null;
	private List<CultureInfo> cultureInfos = new List<CultureInfo> { CultureInfo.GetCultureInfo("cs-CZ"), CultureInfo.GetCultureInfo("en-US"), CultureInfo.GetCultureInfo("sk-SK"), CultureInfo.GetCultureInfo("es-ES") };

    private List<string> values = new List<string>() { "Blazor", "C#", "ASP.NET" };

	private async Task<InputTagsDataProviderResult> GetNewItemSuggestions(InputTagsDataProviderRequest request)
	{
		await Task.Delay(50); // simulate server API call
		return new InputTagsDataProviderResult()
		{
			Data = Enum.GetValues<ThemeColor>().Select(v => v.ToString()).Where(v => v.Contains(request.UserInput, StringComparison.OrdinalIgnoreCase))
		};
	}

	private Task HandleCardClick()
	{
		lastCapturedClick = DateTime.Now;

		return Task.CompletedTask;
	}

	private Task<AutosuggestDataProviderResult<CultureInfo>> CulturesAutosuggestDataProvider(AutosuggestDataProviderRequest request)
	{
		return Task.FromResult(
		new AutosuggestDataProviderResult<CultureInfo>
		{
			Data = cultureInfos.Where(item => item.DisplayName.Contains(request.UserInput, StringComparison.CurrentCultureIgnoreCase)).ToList()
		});
	}

	private void HandleChipUpdated(ChipItem[] chips)
	{
		this.chips = chips;
	}

	private async Task HandleChipRemoveClick(ChipItem chipItemToRemove)
	{
		await filterForm.RemoveChipAsync(chipItemToRemove);
	}

    private SearchBoxItem selectedItem;
    private string triggeredTextQuery;
    private string textQuery;

    List<SearchBoxItem> Data { get; set; } = new()
        {
            new() { Title = "Table", Subtitle = "50 000", Icon = BootstrapIcon.Table },
            new() { Title = "Mouse", Subtitle = "400", Icon = BootstrapIcon.Mouse },
            new() { Title = "Door", Subtitle = "1000", Icon = BootstrapIcon.DoorClosed }
        };

    private void OnItemSelected(SearchBoxItem item)
    {
        selectedItem = item;
    }

    private void OnTextQueryTriggered(string text)
    {
        triggeredTextQuery = text;
    }

    private async Task<SearchBoxDataProviderResult<SearchBoxItem>> ProvideSearchResults(SearchBoxDataProviderRequest request)
    {
        await Task.Delay(400); // imitate slower server API

        return new()
            {
                Data = Data.Where(i => i.Title.Contains(request.UserInput, StringComparison.OrdinalIgnoreCase))
            };
    }

    class SearchBoxItem
    {
        public string Title { get; set; }
        public string Subtitle { get; set; }
        public BootstrapIcon Icon { get; set; }
    }

	public class FormModel : ICloneable
	{
		[Required]
		[MaxLength(50)]
		public string TextBasic { get; set; } = "Basic value";

		[Required]
		[MaxLength(50)]
		public string TextOnInput { get; set; }

		public string TextDisabled { get; set; }

		[Required]
		[MaxLength(50)]
		public string TextPassword { get; set; } = "Password";

		[Required]
		[MaxLength(50)]
		public string TextEmail { get; set; }

		[Required]
		public string TextLong { get; set; }

		public int IntegerValue { get; set; }

		public int? NullableIntegerValue { get; set; }

		public decimal DecimalValue { get; set; }

		public decimal? NullableDecimalValue { get; set; }

        public float PercentValue { get; set; }

        public string SearchBoxValue { get; set; }

		public DateTime DateValue { get; set; } = DateTime.Today;

		public DateTime? NullableDateValue { get; set; }

		[Required]
		public string CultureInfoSelectName { get; set; }

		[Required]
		public CultureInfo CultureInfoSelect { get; set; }

		[Required]
		public CultureInfo CultureInfoAutosuggest { get; set; }

		[Required]
		public bool BoolCheckbox { get; set; } = true;

		[Required]
		public bool BoolSwitch { get; set; } = true;

		public DateTimeRange DateRange { get; set; }

		object ICloneable.Clone() => MemberwiseClone();
	}
}