@page "/InputsTest"
@using System.Globalization;
@using System.ComponentModel.DataAnnotations
@using EnchantedCoder

<h1>Inputs</h1>

<div class="card" @onclick="HandleCardClick">
	<div class="card-header">OnClick propagation test</div>
	<div class="card-body">

		<EcSwitch Text="Enabled" @bind-Value="@enabled" />
		<EcSelect Label="Validation message display mode" @bind-Value="@validationMessageMode" Data="@validationMessageModes" Nullable="false" />

		<EcFormState Enabled="@enabled">

			<EcFilterForm @ref="filterForm" TModel="FormModel" @bind-Model="@model" OnChipsUpdated="HandleChipUpdated">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<EcFormValue Label="Text" Hint="This item cannot be edited.">
					<InputGroupEndTemplate>
						<EcDropdownToggleButton Text="Dropdown" Color="ThemeColor.Secondary" Outline="true" />
						<EcDropdownMenu>
							<EcDropdownItemNavLink Href="#">Item 1</EcDropdownItemNavLink>
							<EcDropdownItemNavLink Href="#">Item 2</EcDropdownItemNavLink>
						</EcDropdownMenu>
					</InputGroupEndTemplate>
					<ValueTemplate>
						<EcIcon Icon="@BootstrapIcon.Wrench" />Text Only...
					</ValueTemplate>
				</EcFormValue>
				<EcFormValue Label="Empty" Hint="This item cannot be edited." />
				<EcInputText Label="Text (large)" InputSize="InputSize.Large" @bind-Value="@context.TextBasic" Hint="@context.TextBasic" ValidationMessageMode="@validationMessageMode" />

				<EcInputText Label="Text (oninput)" @bind-Value="@context.TextOnInput" BindEvent="BindEvent.OnInput" Placeholder="Model updates oninput." ValidationMessageMode="@validationMessageMode">
					<HintTemplate>
						Hint: @context.TextOnInput
					</HintTemplate>
				</EcInputText>

				<EcInputText Label="Text (always disabled)" Enabled="false" @bind-Value="@context.TextDisabled" ValidationMessageMode="@validationMessageMode" />
				<EcInputText Label="Text (password)" Type="InputType.Password" @bind-Value="@context.TextPassword" ValidationMessageMode="@validationMessageMode" />
				@*<EcInputText Label="Text (email)" Type="InputType.Email" @bind-Value="@context.TextEmail" />*@

				<EcInputTextArea Label="TextArea" @bind-Value="@context.TextLong" ValidationMessageMode="@validationMessageMode" />

				<EcInputNumber Label="Integer" @bind-Value="@context.IntegerValue" InputGroupStartText="€" InputGroupEndText=".00" ParsingErrorMessage="Enter correct Integer." ValidationMessageMode="@validationMessageMode" />
				<EcInputNumber Label="Integer (nullable)" @bind-Value="@context.NullableIntegerValue" ParsingErrorMessage="Enter correct Integer." ValidationMessageMode="@validationMessageMode" />
				<EcInputNumber Label="Decimal" @bind-Value="@context.DecimalValue" ParsingErrorMessage="Enter correct Decimal." ValidationMessageMode="@validationMessageMode" />
				<EcInputNumber Label="Decimal (nullable)" @bind-Value="@context.NullableDecimalValue" ParsingErrorMessage="Enter correct Decimal." ValidationMessageMode="@validationMessageMode" />
				<EcInputDate Label="Date" @bind-Value="@context.DateValue" ParsingErrorMessage="Enter correct Date." ValidationMessageMode="@validationMessageMode" />
				<EcInputDate Label="Date (nullable)" @bind-Value="@context.NullableDateValue" ParsingErrorMessage="Enter correct Date." ValidationMessageMode="@validationMessageMode" />
				<EcInputDateRange Label="DateRange" @bind-Value="@context.DateRange" FromParsingErrorMessage="Enter correct From." ToParsingErrorMessage="Enter correct To." ValidationMessageMode="@validationMessageMode" />

				<EcSelect Label="Select (TValueType: string)" @bind-Value="@context.CultureInfoSelectName" ValueSelector="@(item => item.DisplayName)" Data="@cultureInfos" TextSelector="@(item => item.DisplayName)" ValidationMessageMode="@validationMessageMode" />
				<EcSelect Label="Select (TValueType: CultureInfo, small)" @bind-Value="@context.CultureInfoSelect" Data="@cultureInfos" TextSelector="@(item => item.DisplayName)" InputSize="InputSize.Small" ValidationMessageMode="@validationMessageMode" />
				<EcSelect Label="Select (Data == null, small)" TItem="CultureInfo" TValue="CultureInfo" @bind-Value="@context.CultureInfoSelect" TextSelector="@(item => item.DisplayName)" NullDataText="No data available." InputSize="InputSize.Small" ValidationMessageMode="@validationMessageMode" />

				<EcMultiSelect Label="MultiSelect" @bind-Value="@context.CultureInfoMultiSelectNames" ValueSelector="@(item => item.DisplayName)" Data="@cultureInfos" TextSelector="@(item => item.DisplayName)" ValidationMessageMode="@validationMessageMode" />

				<EcAutosuggest Label="Autosuggest" @bind-Value="@context.CultureInfoAutosuggest" TextSelector="@(item => item.DisplayName)" DataProvider="CulturesAutosuggestDataProvider" ValidationMessageMode="@validationMessageMode">
					<HintTemplate>@context.CultureInfoAutosuggest?.DisplayName</HintTemplate>
					<InputGroupStartTemplate>
						<EcButton Color="ThemeColor.Secondary" Text="Start" />
					</InputGroupStartTemplate>
					<InputGroupEndTemplate>
						<EcButton Color="ThemeColor.Secondary" Text="End" />
					</InputGroupEndTemplate>
					<ItemTemplate Context="item">@item.EnglishName <sup>@item.LCID</sup></ItemTemplate>
					<EmptyTemplate>
						<span class="p-2">Couldn't find any matching locale</span>
					</EmptyTemplate>
				</EcAutosuggest>

				<EcCheckbox Text="Checkbox" @bind-Value="@context.BoolCheckbox" Hint="@context.BoolCheckbox.ToString()" ValidationMessageMode="@validationMessageMode" />

				<EcCheckbox Label="CheckBox" @bind-Value="@context.BoolCheckbox" Hint="@context.BoolCheckbox.ToString()" ValidationMessageMode="@validationMessageMode">
					<TextTemplate>
						Some <i>text</i> content to render...
					</TextTemplate>
				</EcCheckbox>

				<EcCheckboxList TItem="CultureInfo"
								TValue="string"
								Label="EcCheckboxList"
								ItemTextSelector="@(item => item.EnglishName)"
								ItemValueSelector="@(item => item.EnglishName)"
								Data="@cultureInfos"
								@bind-Value="@model.CultureInfoMultiSelectNames" />


				<EcSwitch Text="Switch" @bind-Value="@context.BoolSwitch" ValidationMessageMode="@validationMessageMode" />

				<EcSubmit Icon="@BootstrapIcon.Check" Color="ThemeColor.Primary">Submit</EcSubmit>
			</EcFilterForm>
		</EcFormState>
	</div>
	<div class="card-footer">
		<p>Last captured click: @lastCapturedClick</p>
		<EcChipList Chips="@chips" OnChipRemoveClick="HandleChipRemoveClick" />
	</div>
</div>

@code
{
	private bool enabled = true;
	private ValidationMessageMode validationMessageMode = ValidationMessageMode.Tooltip;

	private FormModel model = new FormModel();
	private EcFilterForm<FormModel> filterForm;
	private ChipItem[] chips;
	private DateTime? lastCapturedClick = null;
	private List<ValidationMessageMode> validationMessageModes = Enum.GetValues<ValidationMessageMode>().ToList();

	private List<CultureInfo> cultureInfos = new List<CultureInfo> { CultureInfo.GetCultureInfo("cs-CZ"), CultureInfo.GetCultureInfo("en-US"), CultureInfo.GetCultureInfo("sk-SK"), CultureInfo.GetCultureInfo("es-ES") };

	private Task HandleCardClick()
	{
		lastCapturedClick = DateTime.Now;

		return Task.CompletedTask;
	}

	private Task<AutosuggestDataProviderResult<CultureInfo>> CulturesAutosuggestDataProvider(AutosuggestDataProviderRequest request)
	{
		return Task.FromResult(
		new AutosuggestDataProviderResult<CultureInfo>
			{
				Data = cultureInfos.Where(item => item.DisplayName.Contains(request.UserInput, StringComparison.CurrentCultureIgnoreCase)).ToList()
			});
	}

	private void HandleChipUpdated(ChipItem[] chips)
	{
		this.chips = chips;
	}

	private async Task HandleChipRemoveClick(ChipItem chipItemToRemove)
	{
		await filterForm.RemoveChipAsync(chipItemToRemove);
	}


	public class FormModel : ICloneable, IValidatableObject
	{
		[Required]
		[MaxLength(50)]
		public string TextBasic { get; set; } = "Basic value";

		[Required]
		[MaxLength(50)]
		public string TextOnInput { get; set; }

		public string TextDisabled { get; set; }

		[Required]
		[MaxLength(50)]
		public string TextPassword { get; set; } = "Password";

		//[Required]
		//[MaxLength(50)]
		//public string TextEmail { get; set; }

		[Required]
		public string TextLong { get; set; }

		public int IntegerValue { get; set; }

		public int? NullableIntegerValue { get; set; }

		public decimal DecimalValue { get; set; }

		public decimal? NullableDecimalValue { get; set; }

		public DateTime DateValue { get; set; } = DateTime.Today;

		public DateTime? NullableDateValue { get; set; }

		[Required]
		public string CultureInfoSelectName { get; set; }

		[Required]
		public List<string> CultureInfoMultiSelectNames { get; set; }

		[Required]
		public CultureInfo CultureInfoSelect { get; set; }

		[Required]
		public CultureInfo CultureInfoAutosuggest { get; set; }

		[Required,]
		public bool BoolCheckbox { get; set; } = true;

		[Required]
		public bool BoolSwitch { get; set; } = true;

		public DateTimeRange DateRange { get; set; }

		object ICloneable.Clone() => MemberwiseClone();

		IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			if (BoolSwitch)
			{
				yield return new ValidationResult("Switch has to be turned off", new string[] { nameof(BoolSwitch) });
			}
			if (BoolCheckbox)
			{
				yield return new ValidationResult("Checkbox has to be turned off", new string[] { nameof(BoolCheckbox) });
			}
		}
	}
}