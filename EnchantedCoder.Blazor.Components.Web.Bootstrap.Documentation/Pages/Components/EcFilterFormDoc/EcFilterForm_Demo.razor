<EcFilterForm @ref="filterForm" Model="@model" ModelChanged="HandleModelChanged" TModel="FormModel" OnChipsUpdated="HandleChipsUpdated">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h2>Filter</h2>

    <EcInputText Label="Text1" @bind-Value="@context.Text1" />
    <EcInputText Label="Text2" @bind-Value="@context.Text2">
        <ChipTemplate>
            Haha! There is also a chip with custom template! (value @context.Text2)
        </ChipTemplate>
    </EcInputText>
    <EcInputNumber Label="Number 1" @bind-Value="@context.Number1" />

    <EcSubmit Text="Apply" Color="ThemeColor.Primary" />

    <h2>Values</h2>

    <h3>Values in filter</h3>
    <ul>
        <li>Text1: @context.Text1</li>
        <li>Text2: @context.Text2</li>
        <li>Number1: @context.Number1</li>
    </ul>
</EcFilterForm>

<h3>Values in model</h3>
<ul>
    <li>Text1: @model.Text1</li>
    <li>Text2: @model.Text2</li>
    <li>Text3: @model.Number1</li>
</ul>

<h4>Chips</h4>

<EcChipList Chips="@chips" OnChipRemoveClick="HandleChipRemoveClick" />

<EcGrid @ref="myGrid" TItem="string" DataProvider="@GridDataProvider">
    <Columns>
        <EcGridColumn TItem="string" HeaderText="Value" ItemTextSelector="(item) => item" />
    </Columns>
</EcGrid>

@code {
    protected FormModel model = new FormModel { Text1 = "initial value" };
    private EcGrid<string> myGrid;

    private EcFilterForm<FormModel> filterForm;
    private ChipItem[] chips;

    private void HandleChipsUpdated(ChipItem[] chips)
    {
        this.chips = chips;
    }

    private async Task HandleChipRemoveClick(ChipItem chipToRemove)
    {
        await filterForm.RemoveChipAsync(chipToRemove);
    }

    #region Nested class FormModel
    public class FormModel : ICloneable
    {
        [Required]
        [MaxLength(20)]
        public string Text1 { get; set; }

        public string Text2 { get; set; }

        public int Number1 { get; set; } = 5;

        public object Clone() => MemberwiseClone();
    }
    #endregion

    private async Task HandleModelChanged(FormModel newModel)
    {
        model = newModel;
        //StateHasChanged();
        await myGrid.RefreshDataAsync();
    }

    private async Task<GridDataProviderResult<string>> GridDataProvider(GridDataProviderRequest<string> request)
    {
        await Task.Delay(3000); // simulate server call

        var stringValues = new List<string>();
        stringValues.Add(model.Text1);
        stringValues.Add(model.Text2);
        stringValues.Add(model.Number1.ToString());
        return request.ApplyTo(stringValues);
    }
}
