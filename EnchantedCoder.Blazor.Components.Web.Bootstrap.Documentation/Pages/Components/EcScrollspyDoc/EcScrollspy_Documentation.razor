@page "/components/EcScrollspy"

<ComponentApiDoc Type="typeof(EcScrollspy)">

    <DocHeading Title="How it works" />
    <p>
        Scrollspy needs two components to work together. The <code>EcScrollspy</code> component to wrap
        the area to spy on and the <a href="/components/@nameof(EcNav)"><code>@nameof(EcNav)</code></a> or a list-group (with <code><a href="/components/@nameof(EcScrollspyNavLink)">@nameof(EcScrollspyNavLink)</a>s</code>) to represent the navigation.
        These have to be associated using <code>EcScrollspy.TargetId</code> parameter.
        For more details see also <a href="https://getbootstrap.com/docs/5.3/components/scrollspy/">Bootstrap documentation</a>.
    </p>

    <p>The scrollspy navigation has to use custom <code>EcScrollspyNavLink</code> to workaround the <code>&lt;base&gt;</code> Blazor requirement and inability of Bootstrap to interpret the <code>page#fragment</code> form of link.</p>

    <p>For anchor-fragment navigation (<code>&lt;a href="#id"&gt;</code>) to work the page have to host <a href="/components/EcAnchorFragmentNavigation">EcAnchorFragmentNavigation</a> component.</p>

    <DocAlert Type="DocAlertType.Warning">
        Current component design expects the scrollspy to by used in <b>dedicated scrollable container</b>
        (such as <code>&lt;div&gt;</code> or <a href="/components/EcOffcanvas">EcOffcanvas</a>).<br />
        For full-page scrollspy, the spying has to be attached directly to <code>&lt;body&gt;</code> (will be implemented later as needed?).
    </DocAlert>

    <DocHeading Title="Static content with EcNav navigation" />
    <Demo Type="typeof(EcScrollspy_Demo_EcNav)" />

    <DocHeading Title="Static content with list-group navigation" />
    <Demo Type="typeof(EcScrollspy_Demo_ListGroup)" />

    <DocHeading Title="Dynamic content (async loaded data)" />
    <DocAlert Type="DocAlertType.Warning">
        <p>
            Bootstrap scrollspy calculates offsets of individual sections when activated (i.e. <code>OnAfterRenderAsync</code> within first render). If the content changes dynamicaly,
            you have to refresh the offsets manually by calling <code>EcScrollspy.RefreshAsync()</code>.
        </p>
        <p>
            Simmilar issue applies for fragment-navigation. You have to postpone the initial fragment navigation to happen after the data gets loaded and the UI renders the final version
            (by setting <code>&lt;EcAnchorFragmentNavigation Automation="EcAnchorFragmentNavigation.SamePage"&gt;</code>
            and calling <code>EcAnchorFragmentNavigation.ScrollToCurrentUriFragmentAsync()</code>).
        </p>
        <p>Consider using <i>placeholders</i> to fix the UI layout while loading.</p>
    </DocAlert>
    <Demo Type="typeof(EcScrollspy_Demo_DynamicContent)" />

    <DocHeading Title="Custom navigation content" />
    <DocAlert>
        When using <code>EcButton</code> inside <code>EcScrollspyNavLink</code>, be sure to set s <code>OnClickStopPropagation = "true"</code>.
        If you won't, the application will navigate to <code>/#anchor</code> of the <code>EcScrollspyNavLink</code> after <code>OnClick</code> handler completes.
    </DocAlert>
    <Demo Type="typeof(EcScrollspy_Demo_CustomNavigationContent)" />
</ComponentApiDoc>

<ComponentApiDoc Type="typeof(EcScrollspyNavLink)" />
