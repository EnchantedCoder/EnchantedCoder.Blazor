@attribute [Route("/components/" + nameof(EcCollapse))]
@attribute [Route("/components/" + nameof(EcCollapseToggleButton))]
@attribute [Route("/components/" + nameof(EcCollapseToggleElement))]

<ComponentApiDoc Type="typeof(EcCollapse)">

    <DocHeading Title="Basic usage" />
	<Demo Type="typeof(EcCollapse_Demo_Basic)" Tabs="false" />

    <DocHeading Title="Horizontal" />
	<p>You can change the animation direction with <code>CollapseDirection</code> parameter.</p>
	<Demo Type="typeof(EcCollapse_Demo_Horizontal)" />

    <DocHeading Title="Multiple targets" />
	<p>You can use the <code>CollapseTarget</code> selector to toggle multiple targets.</p>
	<Demo Type="typeof(EcCollapse_Demo_MultipleTargets)" />

    <DocHeading Title="Custom toggle element" />
	<p>Use <code>EcCollapseToggleElement</code> (<code>with ElementName="..."</code>) instead of <code>EcCollapseToggleButton</code> to create custom toggler (usually you will add <code>role="button"</code> to apply pointer cursor type).</p>
	<Demo Type="typeof(EcCollapse_Demo_CustomToggleElement)" />

    <DocHeading Title="Start as expanded" Id="InitiallyExpanded" />
	<p>The <code>EcCollapse</code> starts in collapsed state by default. If you want it to be expanded, set the <code>InitiallyExpanded</code> parameter:</p>
	<Demo Type="typeof(EcCollapse_Demo_InitiallyExpanded)" />

    <DocHeading Title="Programming" />
    <p>You can use <code>ShowAsync()</code> and <code>HideAsync()</code> methods to expand/collapse the component from your code.</p>
	<Demo Type="typeof(EcCollapse_Demo_Programming)" />

</ComponentApiDoc>

<ComponentApiDoc Type="typeof(EcCollapseToggleButton)" />

<ComponentApiDoc Type="typeof(EcCollapseToggleElement)" />