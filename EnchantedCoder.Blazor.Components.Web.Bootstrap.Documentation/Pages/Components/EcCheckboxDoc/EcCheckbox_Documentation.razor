@attribute [Route("/components/" + nameof(EcCheckbox))]
@attribute [Route("/components/EcInputCheckbox")]

<ComponentApiDoc Type="typeof(EcCheckbox)">

    <DocAlert Type="DocAlertType.Info">
        <code>EcCheckbox</code> replaces the former <code>EcInputCheckbox</code> component, which was dropped in v4.0.0.
        <ul class="mb-0">
            <li><code>EcInputCheckbox.Label</code> is now <code>EcCheckbox.Text</code></li>
            <li>new <code>Label</code> parameter coresponds to the optional <code>.form-label</code></li>
        </ul>
    </DocAlert>

    <DocHeading Title="Basic usage" />
    <Demo Type="typeof(EcCheckbox_Demo)" Tabs="false" />

    <DocHeading Title="Inline" />
    <p>Group checkboxes on the same horizontal row by adding <code>Inline="true"</code> to the checkboxes.</p>
    <DocAlert Type="DocAlertType.Warning">
        Our CSS defaults bring flex-column to <code>&lt;form&gt;</code> element (<code>EditForm</code> component),
        every single direct child component of <code>&lt;form&gt;</code> is stacked vertically.<br />
        This setup implies, whenever you want to go for horizontal stacking, you have to wrap your items in some
        element (usually <code>&lt;div&gt;</code>). This also applies to the inline checkboxes.
    </DocAlert>
    <Demo Type="typeof(EcCheckbox_Demo_Inline)" />

    <DocHeading Title="Reverse" />
    <p>Put the checkbox on the opposite side by setting the <code>Reverse</code> parameter to <code>true</code>.</p>
    <Demo Type="typeof(EcCheckbox_Demo_Reverse)" />

    <DocHeading Title="Button groups" />
    <p><code>EcCheckbox</code> can be used within <a href="/components/EcButtonGroup#CheckboxesAndRadios">EcButtonGroup</a>.</p>
</ComponentApiDoc>