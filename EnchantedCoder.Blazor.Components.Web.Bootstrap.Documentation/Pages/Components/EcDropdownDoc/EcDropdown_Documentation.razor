@attribute [Route("/components/" + nameof(EcDropdown))]
@attribute [Route("/components/EcDropdownToggle")]
@attribute [Route("/components/" + nameof(EcDropdownToggleElement))]
@attribute [Route("/components/" + nameof(EcDropdownMenu))]
@attribute [Route("/components/" + nameof(EcDropdownItem))]
@attribute [Route("/components/" + nameof(EcDropdownHeader))]
@attribute [Route("/components/" + nameof(EcDropdownDivider))]
@attribute [Route("/components/" + nameof(EcDropdownContent))]

@inherits PerformanceLoggingComponentBase
@using Components.EcNavDoc


<ComponentApiDoc Type="typeof(EcDropdown)">

    <DocHeading Title="Basic usage" />
    <p>
        Use <code>EcDropdown</code> and <code>EcDropdownToggleElement</code> (with <code>ElementName="..."</code>) to create dropdown with custom toggler.
        (Usually you will add <code>role="button"</code> to apply pointer cursor type.)
    </p>
    <Demo Type="typeof(EcDropdown_Demo_Basic)" Tabs="false" />

    <DocHeading Title="Directions" />
    <Demo Type="typeof(EcDropdown_Demo_Directions)" />

    <DocHeading Title="Header, Disabled, Active" />
    <p>Set <code>CssClass="active"</code> to highlight the item. (In case of <code>NavLink</code> functionality needed, separate <code>EcDropdownMenuNavLinkItem</code> will be implemented.)</p>
    <p>Set <code>Enabled="false"</code> to disable the item. The <code>EcFormState.Enabled</code> inheritance is also supported.</p>
    <Demo Type="typeof(EcDropdown_Demo_HeaderDisabledActive)" />

    <DocHeading Title="Menu alignment" />
    <p>By default, a dropdown menu is automatically positioned 100% from the top and along the left side of its parent. You can change this with the <code>EcDropdownMenu.Alignment</code> parameter. By default, no alignment classes are applied.</p>
    <DocAlert Type="DocAlertType.Warning">
        <p>When you supply the <code>EcDropdownMenu.Alignment</code> parameter, it is only applied when the dropdown menu wouldn't overflow (no part is covered), otherwise, the dropdown menu is positioned automatically by Popper.</p>
        <p>If you want to force the set alignment, then add the <code>data-bs-display</code> attribute to the <a href="/components/EcDropdown#EcDropdownToggleElement">EcDropdownToggleElement</a> (<a href="/components/EcDropdown#EcDropdownToggleButton">EcDropdownToggleButton</a>) and set it to <code>static</code>.</p>
    </DocAlert>
    <Demo Type="typeof(EcDropdown_Demo_MenuAlignment)" />

    <DocHeading Title="Custom content" />
    <p>Use <code>EcDropdownContent</code> instead of <code>EcDropdownMenu</code>.</p>
    <Demo Type="typeof(EcDropdown_Demo_CustomContent)" />


    <DocHeading Title="Dropdown offset and reference" Id="offset-reference" />
    <p>
        You can change the location of the dropdown by setting the <code>@nameof(EcDropdownToggleButton).@nameof(EcDropdownToggleButton.DropdownOffset)</code>
        and/or <code>@nameof(EcDropdownToggleButton).@nameof(EcDropdownToggleButton.DropdownReference)</code>.
    </p>
    <Demo Type="typeof(EcDropdown_Demo_DropdownOffsetAndReference)" />

    <DocHeading Title="Reference to custom HTML element" Id="custom-reference" />
    <p>
        If you want to position the dropdown relative to a specific element, use the <code>DropdownReference</code> parameter.<br/>
        Specific structure of <code>#id</code> gets recognized and handed over to the underlying Bootstraps dropdown.
    </p>
    <Demo Type="typeof(EcDropdown_Demo_DropdownReference)" />

    <DocHeading Title="AutoClose behavior" />
    <p>By default, the dropdown menu is closed when clicking inside or outside the dropdown menu. You can use the <code>AutoClose</code> parameter to change this behavior of the dropdown.</p>
    <Demo Type="typeof(EcDropdown_Demo_AutoClose)" />

    <DocHeading Title="Nav with dropdown" />
    <p>You can use <code>EcDropdown</code> inside <code><a href="/components/@nameof(EcNav)">@nameof(EcNav)</a></code>.</p>
    <Demo Type="typeof(EcNav_Demo_Dropdowns)" />

    <DocHeading Title="Dark dropdowns" />
    <p>Opt into darker dropdowns to match a dark navbar or custom style by adding <code>.dropdown-menu-dark</code> onto a <code>EcDropdownMenu</code> component.</p>
    <Demo Type="typeof(EcDropdown_Demo_Dark)" />
</ComponentApiDoc>

<ComponentApiDoc Type="typeof(EcDropdownToggleElement)" />
<ComponentApiDoc Type="typeof(EcDropdownMenu)" />
<ComponentApiDoc Type="typeof(EcDropdownContent)" />
<ComponentApiDoc Type="typeof(EcDropdownHeader)" />
<ComponentApiDoc Type="typeof(EcDropdownItemNavLink)" />
<ComponentApiDoc Type="typeof(EcDropdownItem)" />
<ComponentApiDoc Type="typeof(EcDropdownItemText)" />
<ComponentApiDoc Type="typeof(EcDropdownDivider)" />
