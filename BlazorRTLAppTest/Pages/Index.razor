@page "/"
@using System.ComponentModel.DataAnnotations
@using EnchantedCoder

<EditForm Model="@model" OnValidSubmit="@(() => model.Text = "Validation passed... :-)")">
	<DataAnnotationsValidator />

	<EcInputText Label="EcInputText" @bind-Value="@model.Text" Placeholder="Enter text here." Hint="Hint: Enter text, value is shared with all text inputs." />

	<EcInputTextArea Label="EcInputTextArea" @bind-Value="@model.Text" />

	<EcInputNumber Label="EcInputNumber" @bind-Value="@model.IntegerValue"  />

	<EcInputDate Label="EcInputDate" @bind-Value="@model.DateValue" />
	<EcInputDateRange Label="EcInputDateRange" @bind-Value="@model.DateTimeRangeValue" />

	<EcCheckbox Text="Checkbox" @bind-Value="@model.BoolValue" />
	<EcSwitch Text="Switch" @bind-Value="@model.BoolValue" />

	<EcSubmit Color="ThemeColor.Primary">Validate</EcSubmit>

</EditForm>

@code
{
    protected DemoModel model = new DemoModel();

    public class DemoModel
    {
        [Required(ErrorMessage = "Enter text.")]
        [MaxLength(50, ErrorMessage = "Maximum length of text is 50 letters.")]
        public string Text { get; set; } = string.Empty;

        [Range(1, Int32.MaxValue, ErrorMessage = "Enter a positive whole number.")]
        public int IntegerValue { get; set; }

        [Required(ErrorMessage = "Enter a date.")]
        public DateTime? DateValue { get; set; } = null;

        [DateTimeRangeValidator(ErrorMessage = "Start and end dates have to be set.")]
        public DateTimeRange DateTimeRangeValue { get; set; }

        [Range(typeof(bool), "true", "true", ErrorMessage = "Has to be enabled.")]
        public bool BoolValue { get; set; }

        public class DateTimeRangeValidator : ValidationAttribute
        {
            protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
            {
                if (value is null || validationContext is null || validationContext.MemberName is null)
                {
                    return null;
                }

                DateTimeRange dateTimeRange = (DateTimeRange)value;
                if (dateTimeRange.StartDate is null || dateTimeRange.EndDate is null)
                {
                    return new ValidationResult(ErrorMessage, new string[] { validationContext.MemberName });
                }

                return null;
            }
        }
    }
}
